1.For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name who diagnosed their problem.
SELECT
  CONCAT(patients.first_name, ' ', patients.last_name) as patient_name,
  diagnosis,
  CONCAT(doctors.first_name,' ',doctors.last_name) as doctor_name
FROM patients
  JOIN admissions ON admissions.patient_id = patients.patient_id
  JOIN doctors ON doctors.doctor_id = admissions.attending_doctor_id;

2.display the number of duplicate patients based on their first_name and last_name.

select first_name, last_name,
count(*) as total
from patients
 group by first_name, last_name
 having count(*) > 1;  
 
3.Display patient's full name,
height in the units feet rounded to 1 decimal,
weight in the unit pounds rounded to 0 decimals,
birth_date,
gender non abbreviated.

Convert CM to feet by dividing by 30.48.
Convert KG to pounds by multiplying by 2.205.

select
    concat(first_name, ' ', last_name) AS 'patient_name', 
    ROUND(height / 30.48, 1) as 'height "Feet"', 
    ROUND(weight * 2.205, 0) AS 'weight "Pounds"', birth_date,
CASE
	WHEN gender = 'M' THEN 'MALE' 
  ELSE 'FEMALE' 
END AS 'gender_type'
from patients

3.Show all of the patients grouped into weight groups.
Show the total amount of patients in each weight group.
Order the list by the weight group decending.

For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc.

SELECT FLOOR(weight/10) * 10 as weight_Group, count(*) as cnt
FROM patients
GROUP BY FLOOR(weight/10)
ORDER BY FLOOR(weight/10) DESC 

4.Show patient_id, weight, height, isObese from the patients table.

Display isObese as a boolean 0 or 1.

Obese is defined as weight(kg)/(height(m)2) >= 30.

weight is in units kg.

height is in units cm.

4.Show patient_id, weight, height, isObese from the patients table.
Display isObese as a boolean 0 or 1.
Obese is defined as weight(kg)/(height(m)2) >= 30.
weight is in units kg.
height is in units cm.

 SELECT patient_id, weight, height,
CASE
WHEN weight/POWER(height/100.0,2) >= 30 then '1'
ELSE '0' END AS isObese
FROM patients

5.
Show patient_id, first_name, last_name, and attending doctor's specialty.
Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'

Check patients, admissions, and doctors tables for required information.

SELECT
  p.patient_id,
  p.first_name AS patient_first_name,
  p.last_name AS patient_last_name,
  ph.specialty AS attending_doctor_specialty
FROM patients p
  JOIN admissions a ON a.patient_id = p.patient_id
  JOIN doctors ph ON ph.doctor_id = a.attending_doctor_id
WHERE
  ph.first_name = 'Lisa' and
  a.diagnosis = 'Epilepsy'

6.All patients who have gone through admissions, can see their medical documents on our site.
 Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.
The password must be the following, in order:
1. patient_id
2. the numerical length of patient's last_name
3. year of patient's birth_date

select distinct(a.patient_id)
,concat(distinct(p.patient_id),len(p.last_name),year(p.birth_date)) as temp_password
from patients p
join admissions a on a.patient_id = p.patient_id;

7.Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance.

Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.

select case when patient_id%2=0 then 'Yes' else 'No' end as has_insurance
,case when patient_id%2=0 then count(patient_id)*10 else count(patient_id)*50 end as cost_after_insurance
from admissions
group by has_insurance;

8.Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name

SELECT pr.province_name
FROM patients AS pa
  JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_name
HAVING
  COUNT( CASE WHEN gender = 'M' THEN 1 END) > COUNT( CASE WHEN gender = 'F' THEN 1 END);


9.We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:
- First_name contains an 'r' after the first two letters.
- Identifies their gender as 'F'
- Born in February, May, or December
- Their weight would be between 60kg and 80kg
- Their patient_id is an odd number
- They are from the city 'Kingston'

select*
from patients
where first_name like '__r%' and gender = 'F' and
 month(birth_date) in (2,5,12) and weight between 60 and 80 
 and patient_id%2<>0 and city='Kingston';

10.
Show the percent of patients that have 'M' as their gender. Round the answer to the nearest hundreth number and in percent form.

SELECT CONCAT(
    ROUND(
      (
        SELECT COUNT(*)
        FROM patients
        WHERE gender = 'M'
      ) / CAST(COUNT(*) as float),
      4
    ) * 100,
    '%'
  ) as percent_of_male_patients
FROM patients;

11.For each day display the total amount of admissions on that day. Display the amount changed from the previous date.

with admission_counts_table as (
    select admission_date
    , count(patient_id) as admission_count
    from admissions
    group by admission_date
)
select admission_date
,admission_count
,admission_count - LAG(admission_count) over(order by admission_date) as admission_count_change 
from admission_counts_table;

12.Sort the province names in ascending order in such a way that the province 'Ontario' is always on top.

select province_name
from province_names
order by
  (case when province_name = 'Ontario' then 0 else 1 end),
  province_name
